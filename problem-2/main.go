package main

import "fmt"

/**
 * Even Fibonacci numbers
 *
 * https://projecteuler.net/problem=2
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 *  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

 *
 * http://odz.sakura.ne.jp/projecteuler/index.php?cmd=read&page=Problem%202
 * フィボナッチ数列の項は前の2つの項の和である. 最初の2項を 1, 2 とすれば, 最初の10項は以下の通りである.
 *  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * 数列の項の値が400万以下の, 偶数値の項の総和を求めよ.
 */

func answer0(max int64) int64 {
	var before int64 = 0
	var current int64 = 1
	var sum int64 = 0
	for {
		fn := current + before
		if fn > max {
			break
		}
		if (fn & 0x01) == 0 { // even
			sum += fn
		}
		before = current
		current = fn
	}
	return sum
}

func answer1(max int64) int64 {
	// 01, 01, 02, 03, 05, 08, 13, 21, 34, ...
	//  a,  b,  c,  a,  b,  c,  a,  b,  c, ...
	var a int64 = 1 // odd
	var b int64 = 1 // odd
	c := a + b      // 2 (even)
	var sum int64 = 0
	for c <= max {
		sum += c
		a = b + c // next (odd)
		b = c + a // next, next (odd)
		c = a + b // next, next, next (even)
	}
	return sum
}

func main() {
	fmt.Println(answer0(4000000))
	fmt.Println(answer1(4000000))
}

/* Copyright 2018 Spiegel
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * 	http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
